#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  car_years = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item['total_sales'] > max_sales['total_sales']:
      max_sales = item
    # TODO: also handle most popular car_year
    car_year = item['car']['car_year']
    if car_year not in car_years:
      car_years[car_year] = 0
    car_years[car_year] += item['total_sales']
  years = sorted(car_years.items(), key = lambda kv:(kv[1], kv[0]))
  popular_year = years[-1][0]
  popular_year_sales = years[-1][1]

  summary = "The {} generated the most revenue: ${}. The {} had the maximum sales: {}. The most popular year was {} with {} sales.".format(
      format_car(max_revenue["car"]), max_revenue["revenue"], format_car(max_sales["car"]), max_sales["total_sales"],
      popular_year, popular_year_sales)

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("/home/student-04-57019aa3e971/car_sales.json")
  summary = process_data(data)
  table_data = cars_dict_to_table(data)
  # TODO: turn this into a PDF report
  reports.generate('/tmp/cars.pdf', 'Sales Summary for Last Month', summary, table_data)
  # TODO: send the PDF report as an email attachment

  sender = 'automation@example.com'
  to = 'student-04-57019aa3e971@example.com'
  sub = 'Sales summary for last month'
  body = summary
  attachment = '/tmp/cars.pdf'
  message = emails.generate(sender, to, sub, body, attachment)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)

